name: Deploy Docker Compose to Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest 

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Set up SSH key
    - name: Set up SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # Step 3: Add server to known_hosts
    - name: Add server to known_hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    # Step 4: Archive the Docker Compose folder
    - name: Archive Docker Compose folder
      run: |
        tar -czf docker-compose-app.tar.gz -C docker .

    # Step 5: Copy the Docker Compose archive to the server
    - name: Copy Docker Compose archive to server
      run: |
        scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -P ${{ secrets.SERVER_PORT }} docker-compose-app.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/docker-compose-app.tar.gz

    # Step 6: Extract and run Docker Compose on the server
    - name: Deploy using Docker Compose
      run: |
        ssh -t -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Extract the Docker Compose folder
          mkdir -p ~/docker-compose-app
          tar -xzf /tmp/docker-compose-app.tar.gz -C ~/docker-compose-app

          # Navigate to the folder and bring up the services
          cd ~/docker-compose-app
          # Stop existing services
          sudo docker-compose down || true
          # Pull latest images and start the services
          sudo docker-compose pull
          sudo docker-compose up -d
          
          # Clean up by removing the transferred tar file
          rm /tmp/docker-compose-app.tar.gz
        EOF
